//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ByteArrayWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ByteArray), typeof(System.Object));
		L.RegFunction("init", init);
		L.RegFunction("loadBytes", loadBytes);
		L.RegFunction("loadBytesOffset", loadBytesOffset);
		L.RegFunction("readByte", readByte);
		L.RegFunction("writeByte", writeByte);
		L.RegFunction("readBoolean", readBoolean);
		L.RegFunction("writeBoolean", writeBoolean);
		L.RegFunction("readShort", readShort);
		L.RegFunction("writeShort", writeShort);
		L.RegFunction("readInt", readInt);
		L.RegFunction("writeInt", writeInt);
		L.RegFunction("readNumber", readNumber);
		L.RegFunction("writeNumber", writeNumber);
		L.RegFunction("readString", readString);
		L.RegFunction("writeString", writeString);
		L.RegFunction("getPosition", getPosition);
		L.RegFunction("setPosition", setPosition);
		L.RegFunction("readUByte", readUByte);
		L.RegFunction("readUShort", readUShort);
		L.RegFunction("readUInt", readUInt);
		L.RegFunction("readIntString", readIntString);
		L.RegFunction("getLength", getLength);
		L.RegFunction("getSendBytes", getSendBytes);
		L.RegFunction("reSet", reSet);
		L.RegFunction("New", _CreateByteArray);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateByteArray(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				ByteArray obj = new ByteArray();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: ByteArray.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			obj.init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int loadBytes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.loadBytes(arg0);
				return 0;
			}
			else if (count == 3)
			{
				ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				obj.loadBytes(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ByteArray.loadBytes");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int loadBytesOffset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			obj.loadBytesOffset(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			sbyte o = obj.readByte();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			obj.writeByte(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readBoolean(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			bool o = obj.readBoolean();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeBoolean(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.writeBoolean(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			short o = obj.readShort();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			short arg0 = (short)LuaDLL.luaL_checknumber(L, 2);
			obj.writeShort(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			int o = obj.readInt();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.writeInt(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readNumber(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			double o = obj.readNumber();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeNumber(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			double arg0 = (double)LuaDLL.luaL_checknumber(L, 2);
			obj.writeNumber(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			string o = obj.readString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.writeString(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			uint o = obj.getPosition();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.setPosition(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readUByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			byte o = obj.readUByte();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readUShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			ushort o = obj.readUShort();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readUInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			uint o = obj.readUInt();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readIntString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			string o = obj.readIntString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getLength(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			long o = obj.getLength();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getSendBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			byte[] o = obj.getSendBytes();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int reSet(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject<ByteArray>(L, 1);
			obj.reSet();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

